#!@BASH@

function show_version()
{
   echo "BSPonMPI version @CPACK_PACKAGE_VERSION@ "
   echo "Built on @BUILD_DATE@ ; Configuration '@CMAKE_BUILD_TYPE@'"
   echo "C compiler was: @CMAKE_C_COMPILER@  ; extra flags '@CMAKE_C_FLAGS@'"
   echo "C++ compiler:   @CMAKE_CXX_COMPILER@ ; extra flags '@CMAKE_CXX_FLAGS@'"
   echo "MPI compiler frontends: @MPI_C_COMPILER@ ; @MPI_CXX_COMPILER@"
}

function show_help()
{
   echo "The BSPonMPI program launcher - @CPACK_PACKAGE_VERSION@"
   echo
   echo "SYNOPSIS"
   echo "    $0 [--help [--version] [--show] [--max-msg-size=<bytes>]"
   echo "       [-n <nprocs>] [--small-exchange-size=<bytes>] <command>"
   echo
   echo "    Only $0 specific options are listed here. See the manual"
   echo "    of @MPIRUN_EXECUTABLE@ for more specific options"
   echo 
   echo "OPTIONS"
   echo "    --help    Shows this description"
   echo 
   echo "    --version Shows version information"
   echo 
   echo "    --show    Instead of launching the command it shows what"
   echo "              command will be executed"
   echo 
   echo "    -n <procs>, -npes <nprocs>,  or --nprocs=<procs>"
   echo "              Launches the program with at most <procs> parallel"
   echo "              processes"
   echo
   echo "    --max-msg-size=<bytes>             [default: $((2**31-1))]"
   echo "              Restricts the runtime to messages equal or less"
   echo "              than the prescribed amount. It may be necessary"
   echo "              to change this value to improve speed or work "
   echo "              around MPI implementation specific stabilty issues"
   echo
   echo "    --small-exchange-size=<bytes>      [default: 1024]"
   echo "              Specifies the maximum number of bytes per process"
   echo "              that still is considered to be a small exchange."
   echo "              For small exchanges a MPI_Alltoall is used, for"
   echo "              which there is a L = O(log p) algorithm on high-"
   echo "              bandwidth networks. For large exchanges throughput"
   echo "              optimal methods (MPI_Put when linked with --rma,"
   echo "              MPI_Irsend/MPI_Irecv when linked with --msg) are"
   echo "              used, but that have also higher latency L = O(p)."
   echo
   echo "    --assume-linear-cost-for-p2p=<alpha>[:<beta>]"
   echo "                                       [default: 10000:1]"
   echo "              Assumes a linear cost-model for sending point-"
   echo "              to-point messages with MPI with start-up cost"
   echo "              alpha and cost per byte beta. Both values accept" 
   echo "              a floating point format."
   echo 
   echo "    --assume-bsp-parameters=<L>[:<g>]  [default: <P*alpha>:<beta>]"
   echo "              Assumes the specified values for the BSP parameters"
   echo "              L and g. This allows the collectives library to"
   echo "              choose the best algorithm."
}

state=normal
rest=()
show=
max_msg_size=$((2**31 - 1))
small_exchange_size=1024
p2p_latency=10000
p2p_msggap=1
bsp_g=
bsp_L=
bsp_nprocs=

for arg
do

  case $state in
    nprocs)  
       bsp_nprocs=${arg}
       rest=( "${rest[@]}"  @MPIRUN_NPROCS_PARAM_SCRIPT@${arg} )
       state=normal
       ;;

    normal)

  case $arg in
     -help|--help) 
        @MPIRUN_EXECUTABLE@ --help
        echo 
        echo "------------------------------------------------------"
        echo
        show_help
        exit 0
        ;;


     -n|-npes)
        state=nprocs
        ;;

    --nprocs=*)
        bsp_nprocs=${arg#--nprocs=}
        rest=( "${rest[@]}"  @MPIRUN_NPROCS_PARAM_SCRIPT@${arg#--nprocs=} )
        ;;

    -version|--version) 
        show_version
        exit 0
        ;;

    -show|--show) show=echo
        ;;

    --max-msg-size=*) 
         max_msg_size=${arg#--max-msg-size=}
         ;;

    --small-exchange-size=*)
         small_exchange_size=${arg#--small-exchange-size=}
         ;;
 
    --assume-linear-cost-for-p2p=*:*)
         p2p_cost=${arg#--assume-linear-cost-for-p2p=}
         p2p_latency=${p2p_cost%:*}
         p2p_msggap=${p2p_cost#*:}
         ;;
 
    --assume-linear-cost-for-p2p=*)
         p2p_latency=${arg#--assume-linear-cost-for-p2p=}
         ;;
         
    --assume-bsp-parameters=*:*)
         bsp_params=${arg#--assume-bsp-parameters=}
         bsp_L=${bsp_params%:*}
         bsp_g=${bsp_params#*:}
         ;;
 
    --assume-bsp-parameters=*)
         bsp_L=${arg#--assume-bsp-parameters=}
         ;;
       
    *)   rest=( "${rest[@]}" "$arg" )
         ;;
  esac
  ;;
  esac
done

if [ "x${bsp_L}" = x ]; then
  if [ x${bsp_nprocs} = x ]; then
    bsp_nprocs=1
  fi
  bsp_L=$(( bsp_nprocs * p2p_latency )) 
fi

if [ "x${bsp_g}" = x ]; then
  bsp_g=${p2p_msggap}
fi

$show export DYLD_LIBRARY_PATH=@BSPONMPI_LIB_DIR@:$DYLD_LIBRARY_PATH
$show export LD_LIBRARY_PATH=@BSPONMPI_LIB_DIR@:$LD_LIBRARY_PATH
$show export BSPONMPI_MAX_MSG_SIZE=${max_msg_size}
$show export BSPONMPI_SMALL_EXCHANGE_SIZE=${small_exchange_size}
$show export BSPONMPI_P2P_LATENCY=${p2p_latency}
$show export BSPONPMI_P2P_MSGGAP=${p2p_msggap}
$show export BSC_L=${bsp_L}
$show export BSC_G=${bsp_g}

$show exec @MPIRUN_EXECUTABLE@ "${rest[@]}"
