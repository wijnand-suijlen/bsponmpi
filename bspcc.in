#!@BASH@
name=`basename "$0"`
if [ $name = bspcxx ]; then
  cc=@MPI_CXX_COMPILER@
else
  cc=@MPI_C_COMPILER@
fi
cxx=@MPI_CXX_COMPILER@
bsponmpi=( "-L@BSPONMPI_LIB_DIR@" -lbsponmpi )
cflags="-I@BSPONMPI_INCLUDE@"

linking=yes
read_sources=no
read_output=no
read_linker=no
show=

objdir=
sources=()
tmp_objects=()
objects=()
compile_flags=()
link_flags=()
output_flag=()

function onexit_clean()
{
    if [ "x${objdir}" != x ]; then
      rm -r "$objdir"
    fi
}

trap onexit_clean EXIT


function add_source_or_object()
{
    case $1 in
        *.o|*.a) objects=( "${objects[@]}" "$1" )
              ;;
        *) sources=( "${sources[@]}" "$1" )
            ;;
    esac
} 

function add_compile_flag()
{
    compile_flags=( "${compile_flags[@]}" "$1" )
}

function add_link_flag()
{
    link_flags=( "${link_flags[@]}" "$1" )
} 

function show_version()
{
   echo "BSPonMPI version @CPACK_PACKAGE_VERSION@ "
   echo "Built on @BUILD_DATE@ ; Configuration '@CMAKE_BUILD_TYPE@'"
   echo "C compiler was: @CMAKE_C_COMPILER@  ; extra flags '@CMAKE_C_FLAGS@'"
   echo "C++ compiler:   @CMAKE_CXX_COMPILER@ ; extra flags '@CMAKE_CXX_FLAGS@'"
   echo "MPI compiler frontends: @MPI_C_COMPILER@ ; @MPI_CXX_COMPILER@"
}

function show_help()
{
   echo "The BSPonMPI compiler frontend - @CPACK_PACKAGE_VERSION@"
   echo
   echo "SYNOPSIS"
   echo "    $0 [--help] [--version] [--show] [--mcbsp] ... "
   echo
   echo "    Only $0 specific options are listed here. See the manual"
   echo "    of $cc for more specific options"
   echo 
   echo "OPTIONS"
   echo "    --help    Shows this description"
   echo 
   echo "    --version Shows version information"
   echo 
   echo "    --show    Instead of performing the compilation it shows"
   echo "              what command will be executed"
   echo
   echo "    --mcbsp   Use the MulticoreBSP for C compatible headers."
   echo "              By default the header that is compatible with the"
   echo "              publication of Hill et al. 1998 is loaded."
   echo
   echo "    --prof    Tracks time spent across BSPlib and MPI routines"
   echo
}


for arg
do

  case $arg in
     -help|--help) 
        $cc --help
        echo 
        echo "------------------------------------------------------"
        echo
        show_help
        exit 0
        ;;

    -version|--version) 
        show_version
        exit 0
        ;;

    -show|--show) show=echo
        ;;

    -mcbsp|--mcbsp)
        add_compile_flag "-DBSPONMPI_MCBSP_COMPAT=1"
        ;;

    -prof|--prof)
        bsponmpi=( "-L@BSPONMPI_LIB_DIR@" -lbsponmpi_prof )
        ;;

    -c) linking=no
        add_compile_flag "$arg"
        ;;

    -o) read_output=yes
        ;;

    --) read_sources=yes
        add_compile_flag "$arg"
        ;;

    -l*)   add_link_flag "$arg"
        ;;

    -Wl,*) add_link_flag "$arg"
        ;;

    -Xlinker) add_link_flag "$arg"
           read_linker=yes
        ;;

    -*) if [ x$read_linker = "xyes" ]; then
          add_link_flag "$arg"
          read_linker=no
        elif [ x$read_output = "xyes" ]; then
          output_flag=("-o" "$arg" )
          read_output=no
        elif [ x$read_sources = xyes ]; then
          add_source_or_object "$arg"
        else
          add_compile_flag "$arg"
        fi
        ;;
    
    *)  if [ x$read_linker = "xyes" ]; then
          add_link_flag "$arg"
          read_linker=no
        elif [ x$read_output = "xyes" ]; then
          output_flag=("-o" "$arg" )
          read_output=no
        else
          add_source_or_object "$arg"
        fi
        ;;
  esac
done


if [ x$linking = xno ]; then
  $show $cc $cflags  "${compile_flags[@]}" \
         "${sources[@]}" "${objects[@]}" \
         "${link_flags[@]}" "${output_flag[@]}"
  exit_status=$?
else

  objdir=`mktemp -d`
  objnum=1
  for s in "${sources[@]}"
  do
    obj="${objdir}/${objnum}.o"
    objnum=$(( objnum + 1 ))
    tmp_objects=( "${tmp_objects[@]}" "$obj" )
    $show $cc $cflags "${compile_flags[@]}" "$s" -c -o "$obj" || { exit $?; }
  done

  $show $cxx $cflags "${compile_flags[@]}" \
           "${tmp_objects[@]}" "${objects[@]}" \
           "${link_flags[@]}" "${bsponmpi[@]}" "${output_flag[@]}"
  exit_status=$?
fi

exit $exit_status
