.\" Some useful macros copied from groff's an-ext.tmac, which are not available on e.g. macOS
.\"
.\" Start example
.de EX
.  nr mE \\n(.f
.  nf
.  nh
.  ft CW
..
.\" End example
.de EE
.  ft \\n(mE
.  fi
.  hy \\n(HY
..
.\" The man page
.TH BOMPIPROBE 1
.SH NAME
bompiprobe \- The BSPonMPI machine probing tool
.
.SH SYNOPSIS
.B bsprun
.RI [ BSPRUN\ OPTIONS ...]
.B bompiprobe
.RB [ \-\-lincost | \-\-bsp ]
.RI [ OPTIONS ...]
.fi
.
.SH DESCRIPTION
This tool measures performance characteristics of a parallel
computer in order to fine-tune various internal communication algorithms.
MPI communication performance is modeled with a linear cost-model
that assumes 
.I T(n) = alpha + beta n 
seconds are required to send a message of 
.I n
bytes.
When the
.B \-\-lincost
option is used, the
.B bompiprobe 
tool measures the average 
.I alpha
and
.I beta
by random sampling the time required for various communication patterns.
Similarly, the 
.B \-\-bsp
option makes this tool measure the BSP cost-model parameters
.I g 
and 
.I L
and an additional request overhead cost 
.IR o .
The parallel collectives library assumes that the completion of an arbitrary
.IR h -relation
with words of size 
.I w
requires 
.I T(h, w) = L + h o + h w g
time.
The results are printed as a shell script that can be sourced by 
.B bsprun
with the
.B \-\-use\-benchmark\-file
option.
.
.PP
Performance of modern high-performance computer systems
is often highly irregular, due to interference from e.g. power saving 
features in the hardware, the operating system, or other users. 
To get a sense of accuracy, confidence intervals are estimated by 
random subsampling or bootstrapping (see 
.BR \-\-conf\-interval\-method ). 
However, these are likely to be inaccurate especially due to
power saving features, which skew performance for long
periods of time. 
For example, dynamic frequency scaling allows systems
to operate faster as long as thermal constraints are not exceeded. 
Ambient temperature has, therefore, also an influence on the operating
speed of such systems.
A computer cluster housed in an office where
the air conditioning is switched off during the nights,
will experience a daily rhythm, and can thus easily require 
a month of probing before reliable confidence intervals have
been established. 
.
.PP
If only little time is available for a probe, try
running without any command line parameters, except
.BR \-\-lincost \ or \ \-\-bsp .
Default values for all parameters will be chosen, which should
lead to a result quickly, though inaccurate. 
These values should be corrected by hand if they seem inconsistent. 
For highly accurate estimates, count on running this tool
for several days. 
See below how to choose probing parameters.
.
.SH GENERAL OPTIONS
.TP
.BR \-\-lincost \ or \ \-\-bsp
Measure either the linear cost model parameters
.I alpha
and
.I beta
or the BSP cost parameters
.I L
and
.IR g 
and extra parameter
.IR o .
.TP
.BI \-\-granularity= number
Each measurement of a communication pattern is taken by measuring the
time it takes to repeat that pattern a
.I number
times.
Increasing this value reduces variance in the samples, at a cost
of longer sampling times.
.TP
.BI \-\-conf-level= percentage
Results are presented as ranges that will contain the true mean with
.IR percentage %
probability. 
.TP
.BI \-\-conf-interval= percentage
Measurements are taken until cost model parameters have been established
with confidence interval that is smaller than 
.I percentage
of the mean.
.TP
.BI \-\-conf\-interval\-method= method
.I Method
can be 
.BR subsample ,
which gives more accurate results but requires more samples, or
.BR bootstrap ,
which also works with less samples but can be deceiving.
.TP
.BI \-\-ntopos= number
To avoid an advantage for any communications network topology, all 
measurements are taken on a randomized topology.
Because resources are required for each such topology, only
.I number
topologies are allocated.
.TP
.BI \-\-min-samples= number
The minimum number of samples to take.
.TP
.BI \-\-max-samples= number
The maximum number of samples to take.
.TP
.BI \-\-save-sample-data= file
Save raw sample data a file. 
Data is formatted in text.
The column separator is the tab character.
Rows are separated by the newline character.
.
.SH SPECIFIC OPTIONS FOR DETERMINING LINEAR COST PARAMETERS
.TP
.BI \-\-msg-size= size
Communication time of only three types of messages are measured. 
With 0 bytes, with 
.I size
bytes, and with 2x
.I size
bytes.
This message should be large enough to measure 
.I beta
accurately enough.
Taking it too large may make measurement of 
.I alpha
more difficult.
.
.SH SPECIFIC OPTIONS FOR DETERMINING BSP COST PARAMETERS
.TP
.BI \-\--word-size= bytes
Sets the typical request size to 
.IR bytes 
as used in 
.BR bsp_put , 
.BR bsp_hpput
.BR bsp_get ,
.BR bsp_hpget ,
and
.B bsp_send 
calls.
This has influence on the accuracy of the results.
.
.SH QUICK START
.SS Linear cost-model parameters
For efficient operation of BSPonMPI, accurate estimates of the 
linear cost-model parameters are necessary. 
These are measured by default. 
The default values for the other settings should also suffice
for most systems, 
although it may take some time to complete. 
On your personal system you can run e.g. (assuming you have 4 processors) 
.RS
.EX

$ bsprun -n 4 bompiprobe

.EE
.RE
which produces something like the following output
.RS
.EX

# Number of MPI processes= 4
# Confidence level       = 95.00%
# Max confidence interval= 50.00%
# Confidence interval method= bootstrap
# Random process layouts = 10
# Max number of samples  = 2147483647
# Granularity            = 10
# Save samples to        = NA

# Measuring parameters of linear cost model
# Typical message size   = 2500000 bytes
#
#     Taking 1000 samples ...
#     Expected sampling time: inf seconds
#     (Press CTRL-C to interrupt)
#     Sampling time was 10.7813 seconds
# MSG:  alpha =    0.0001776 [    0.0001749 -    0.0001781 ] ;beta =      2.41e-10 [    2.408e-10 -    2.418e-10 ] 
# RMA:  alpha =    9.226e-05 [    8.804e-05 -    9.607e-05 ] ;beta =     3.993e-10 [    3.981e-10 -    4.006e-10 ] 
# MEMCPY: beta=    1.864e-10 [    1.862e-10 -    1.867e-10 ]
.EE
.RE
The sampling will continue until 
.I alpha
and
.I beta
can be determined with the required number of significant digits.
When that happens, a final report is written in the form
of a shell script, e.g.:
.RS
.EX

if [ x${BSPONMPI_A2A_METHOD} = xrma ]; then
   export BSPONMPI_P2P_LATENCY="9.2e-05"
   export BSPONMPI_P2P_MSGGAP="4e-10"
   export BSPONMPI_P2P_N_HP=247522
elif [ x${BSPONMPI_A2A_METHOD} = xmsg ]; then
   export BSPONMPI_P2P_LATENCY="0.00018"
   export BSPONMPI_P2P_MSGGAP="2.4e-10"
   export BSPONMPI_P2P_N_HP=476474
fi

# Save this output to a file, and use it with bsprun's
# --use-benchmark-file parameter

.EE
.RE
If you are satisfied with the results, you should copy
these lines to a file, which you can then use with
.B bsprun.
For example, if you have named this file
.IR my_pc_params ,
you can run a BSPonMPI program
.I my_program
as follows:
.RS
.EX

$ bsprun --use-benchmark-file=my_pc_params -n 4 ./my_program

.EE
.RE
.PP
.SS BSP cost-model parameters
Now use the 
.B \-\-bsp
command line parameter
.RS
.EX

$ bsprun --use-benchmark-file=my_pc_params -n 4 bompiprobe --bsp

.EE
.RE
which produces something like the following output
.RS
.EX

# Number of processes    = 4
# Confidence level       = 95.00%
# Max confidence interval= 50.00%
# Confidence interval method= bootstrap
# Random process layouts = 10
# Max number of samples  = 2147483647
# Granularity            = 10
# Save samples to        = NA

# Measuring BSP machine parameters
# Word size               = 500000 bytes
# Size of max h-relation  = 5000000 bytes
#
#     Taking 1000 samples ...
#     Expected sampling time: inf seconds
#     (Press CTRL-C to interrupt)
# Warm up phase:  1/10;  2/10;  3/10;  4/10;  5/10;  6/10;  7/10;  8/10;  9/10;  10/10; 
# Sample time remaining: 2 seconds
#    (Press CTRL+C to interrupt)
#     Sampling time was 14.2869 seconds
#   PUT :: L =    8.235e-06 [    8.227e-06 -    8.236e-06 ] ; o =    0.0003219 [    0.0003218 -    0.0003221 ] ; g =    6.985e-10 [    6.981e-10 -    6.985e-10 ]
# HPPUT :: L =    8.246e-06 [     8.24e-06 -    8.252e-06 ] ; o =     7.01e-05 [     6.97e-05 -    7.016e-05 ] ; g =    3.051e-10 [    3.051e-10 -    3.054e-10 ]
#   GET :: L =    8.145e-06 [    8.141e-06 -    8.147e-06 ] ; o =    0.0003203 [    0.0003192 -    0.0003202 ] ; g =    6.921e-10 [    6.922e-10 -     6.93e-10 ]
# HPGET :: L =    8.128e-06 [    8.124e-06 -    8.127e-06 ] ; o =    8.726e-05 [    8.653e-05 -      8.7e-05 ] ; g =    2.613e-10 [    2.614e-10 -    2.617e-10 ]
#  SEND :: L =    8.179e-06 [    8.166e-06 -    8.174e-06 ] ; o =    0.0003267 [    0.0003265 -    0.0003272 ] ; g =    6.976e-10 [    6.974e-10 -    6.979e-10 ]

.EE
.RE

Again, measurements will continue until the parameters can be 
established with the required number of significant digits.
Finally the program will report the results as a shell script snippet

.RS
.EX

if [ x${BSPONMPI_A2A_METHOD} = xrma ]; then
  export BSC_PUT_L="8.3e-06"
  export BSC_PUT_G="7e-10"
  export BSC_PUT_O="0.00032"
  export BSC_HPPUT_L="8.2e-06"
  export BSC_HPPUT_G="3.1e-10"
  export BSC_HPPUT_O="6.4e-05"
  export BSC_GET_L="8.4e-06"
  export BSC_GET_G="6.9e-10"
  export BSC_GET_O="0.00032"
  export BSC_HPGET_L="8.4e-06"
  export BSC_HPGET_G="2.6e-10"
  export BSC_HPGET_O="9.2e-05"
  export BSC_SEND_L="8.6e-06"
  export BSC_SEND_G="7e-10"
  export BSC_SEND_O="0.00031"
fi

# Save this output to a file, and use it with bsprun's
# --use-benchmark-file parameter

.EE
.RE

These lines should be copied to the same file used
for the linear cost-model parameters, like
.I my_pc_params 
in the example earlier.
.
.PP
If sampling requires too much time, it can be interrupted at any
time by sending the 
.I SIGINT
signal (CTRL-C from a terminal), if the MPI implementation supports it. 
The total sampling time can also be limited by using the
.BR \-\-granularity ,
.BR \-\-min-samples ,
and
.BR \-\-max-samples 
parameters.
This is useful when
.B bompiprobe
is run from a batch job.
.
.SH AUTHOR
Written by Wijnand J. Suijlen
.
.SH SEE ALSO
.B mpirun
(1),
.B bsprun
(1)
.PP
"BSPlib: The BSP programming library," by J. M. D. Hill, W. F. McColl, D. C. Stefanescu, M. W. Goudreau, K. Lang, S. B. Rao, T. Suel, Th. Tsantilas, R. H. Bisseling, Elsevier, Parallel Computing, Volume 24, Issue 14, December 1998, pages 1947–1980. 
