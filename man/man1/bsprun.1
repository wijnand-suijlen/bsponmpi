.TH BSPRUN 1 
.SH NAME
bsprun \- The BSPonMPI program launcher
.
.SH SYNOPSIS
.BR bsprun 
.RI [ OPTIONS ...]
.IR command ...
.fi
.
.SH DESCRIPTION
Runs a BSPlib program that has been compiled with BSPonMPI's 
.B bspcc
or
.B bspcxx
compiler front end.
It is essentially a wrapper around the
.I mpirun
from the MPI implementation that was used to build BSPonMPI.
For directions on how to launch a program, it is, therefore, essential
to consult the 
.I mpirun
(1) manual as well. However, the following will just work:
.RS
.EX

$ bsprun -n 5 ./a.out

.EE
.RE
which runs ./a.out with 5 processes.
If the system requires a different launcher, then the user
is invited to copy the 
.B bsprun
shell script and to modify it accordingly. 
Alternatively, the 
.B \-\-show
option can be used to generate a template launch script.
.
.SH OPTIONS
Only 
.B bsprun
specific options are listed here. 
All unrecognised options are passed on to the
.I mpirun
command.
.TP
.BI \-n\  nprocs ,\ \-npes\  nprocs ,\ \-\-nprocs= nprocs
Launches the program with at most \fInprocs\fR processes.
.TP
.BR \-\-help
Gives a brief usage overview.
.TP
.BR \-\-version
Shows version information.
.TP
.BR \-\-show
Instead of launching the command it show what exactly will be executed.
.TP
.BR \-\-msg
Use MPI message-passing for buffered commuications.
This uses a protocol based on 
.I MPI_Irsend
(3)/
.I MPI_Isend
(3) - 
.I MPI_Irecv
(3) -
.I MPI_Waitsome\fR.
The effectiveness of this protocol depends on the MPI implementation and
the fabric. 
Its performance might not conform the BSP cost model, in which case
the remote memory access protocol should be used (use the
.BR
\-\-rma
option ).
.TP
.BR \-\-rma
Use MPI remote memory access (RDMA) for buffered communications.
This uses a protocol based on
.I MPI_Put
(3) and
.I
MPI_Fence
(3). Note that some MPI implementations have poor RDMA performance, even
when the fabric supports it.
Also, RDMA might be buggy in some implementations. 
However, when MPI knows how to handle RDMA correctly, its performance
is unparalleled.
For that reason, this protocol is chosen by default.
.TP
.BR \-\-max\-msg\-size=\fIbytes\fR
Restricts the runtime to messages equal or less than \fIbytes\fR bytes.
It may be necessary to change this value to improve speed or work 
around MPI implementation specific stability issues.
By default this value is equal to 
.I INT_MAX.
.TP
.BR \-\-small\-exchange\-size=\fIbytes\fR
Specifies the maximum number of \fIbytes\fR per process
that is still considered to be a small exchange.
For small exchanges an 
.I MPI_Alltoall 
(3) is used, for which there is an O(log p) algorithm on high-bandwidth
networks, where p is the number of processes.
For large exchanges throughput
optimal methods are used, such as 
.I MPI_Put
(3) when running with \-\-rma or
.I MPI_Irsend
(3) and
.I MPI_Irecv
(3) when running with \-\-msg.
These have, however, also a higher latency of O(p). 
The BSPonMPI runtime determines automatically the optimal amount
of data to be sent through the latency optimal method and the 
throughput optimal method,
based on the
.I alpha
and
.I beta
performance parameters as given through
.B \-\-use\-benchmark\-file
option.
This 
.B \-\-small\-exchange\-size
parameter limits the maximum amount of memory used for the
extra required buffering.
By default the limit is set to 1024 bytes.
.TP
.BI \-\-use\-benchmark\-file= file
In order to determine how much data is communicated through the
latency optimal method and how much through the throughput optimal method,
the system requires an estimate of the ratio between the startup
time and the reciprocal throughput of a point-to-point message.
Likewise, BSP machine parameters are necessary to determine the
optimal algorithms for the collectives library.
The 
.B bompiprobe
tool can be used to take measurements and generate the file.
.
.TP
.BI \-\-mpirun, parameter
Passes 
.I parameter
directly to the underlying 
.B mpirun
call.
.
.SH ENVIRONMENT
.B bsprun
is essentially a wrapper around 
.I mpirun
(1) but sets an additional set of environment variables:
.TP
.B BSPONMPI_A2A_METHOD
Sets the all-to-all method for high volume buffered communications.
Legal values are 'msg' and 'rma'. 
See the description of 
.B \-\-msg
and
.B \-\-rma
above for more information.
.TP
.B BSPONMPI_MAX_MSG_SIZE
Sets the maximum MPI message size. 
See the description of 
.B \-\-max-msg-size
above.
.
.TP
.B BSPONMPI_SMALL_EXCHANGE_SIZE
Sets the maximum for small exchanges.
See the description of
.B \-\-small\-exchange\-size
above.
.
.P
In order for the dynamic linker to find the BSPonMPI dynamic
library the
.B DYLD_LIBRARY_PATH
and
.B LD_LIBRARY_PATH
variables are extended to include the path to the library.
.
.SH COST PARAMETERS
The following environment variables are read to determine the optimal
communication algorithms.
Any cost measurement unit can be used as long as they are used consistently.
As an example, we use the byte-second unit system here.
The recommended way of setting these variables is by generating a benchmark
file with 
.B bompiprobe
and using these results with the
.B \-\-use-benchmark\-file
option as described above.
.
.TP
.B BSPONMPI_P2P_LATENCY
The start-up cost of a point-to-point message in
.IR seconds .
.
.TP
.B BSPONMPI_P2P_MSGGAP
The reciprocal throughput for point-to-point messages in
.IR seconds/byte .
.
.TP
.B BSPONMPI_P2P_N_HP
The minimum number of 
.I bytes
at which a 
.B bsp_hpput
or a
.B bsp_hpget
is expected to be faster than a
.B bsp_put
or
.BR bsp_get .
.I Note: This value must always be given in bytes.
.
.TP
.BI BSC_ method _L
The latency cost of a communication pattern with only
.I method
requests in 
.IR seconds . 
.I Method
can be one of
.BR PUT ,
.BR GET ,
.BR SEND ,
.BR HPPUT ,
and
.BR HPGET . 
.
.TP
.BI BSC_ method _G
Sets the reciprocal throughput of a communication pattern with only
.I method
requests in
.IR seconds/byte . 
See 
.BI BSC_ method _L
above for 
.IR method .
.
.TP
.BI BSC_ method _O
Sets the overhead of a single
.I method
request in
.IR seconds .
See 
.BI BSC_ method _L
above for 
.IR method .
.
.SH BENCHMARKING
Every 
.I bsp_sync 
data is exchanged between all processes. 
The total-exchange algorithm is dynamically chosen depending on various
parameters, such as the maximum volume between each pair of processes,
in order to complete the exchange as fast as possible. 
This does not violate the BSPlib performance contract, because,
asymptotically, the time required to complete an arbitrary h-relation
still depends only linearly on h.
However, locally the behaviour may seem non-linear, which can make
benchmark results hard to interpret. 
.PP
There are several ways to make BSPonMPI perform more predictable:
.IP - 
Set 
.B \-\-small\-exchange\-size
to zero.
This disables use of the latency optimal method.
.IP - 
Provide accurate estimates of 
.I alpha
and
.I beta
with the 
.B \-\-use\-benchmark\-file
or 
.B \-\-assume\-p2p\-benchmark
options.
Use the 
.B bompiprobe
to determine them.
.
.PP
Many MPI implementations also change communication algorithms at runtime
depending on various criteria, including data volume, leading to 
locally non-linear performance behaviour, even though BSPonMPI's use of MPI
remains unchanged.
The user is referred to the user documentation of the respective MPI on how
to temporarily fix the algorithm choices.
.
.SH AUTHOR
Written by Wijnand J. Suijlen
.
.SH SEE ALSO
.B mpirun
(1),
.B bspcc
(1),
.B bompiprobe
(1)
.PP
"BSPlib: The BSP programming library," by J. M. D. Hill, W. F. McColl, D. C. Stefanescu, M. W. Goudreau, K. Lang, S. B. Rao, T. Suel, Th. Tsantilas, R. H. Bisseling, Elsevier, Parallel Computing, Volume 24, Issue 14, December 1998, pages 1947â€“1980. 
